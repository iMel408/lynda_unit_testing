Red Phase:
    implement failing unit test

Green Phase:
    write just enough code to make the test pass

Refactor Phase:
    clean up test and code/optimize

ToDo:
x create an instance of the checkout class
x add an item price
x add an item
x calculate the current total
    [update checkout class to have public method for calculating
        the current total and verify that total is correct for one item]
        > add one price for item 'a'
        > and add one item 'a' to the list of checkout items
        > then call calculate total method and verify that it returns one

x add multiple items and get correct total
    [add prices for multiple items, add multiple items to the checkout and
    verify the correct total is calculated]
        > add price for two items
        > add two items to the checkout
        > verify that the correct total is calculated

x add discount rules
    [add a method to Checkout to allow me to submit a discount rule]
    parameters needed:
        > item type
        > number of items required for discount
        > discounted price
x apply discount rules to the total
    [add a discount rule and then add enough items to the checkout
    that the rule should be applied when calculating the total]
    > add rule for 3 of the same items which has a lower price than 3 individual items

x throw exception for item added without a price

